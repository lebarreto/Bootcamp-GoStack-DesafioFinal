{"ast":null,"code":"var _jsxFileName = \"/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/Bootcamp-GoStack-DesafioFinal/fastfeetweb/src/pages/EdicaoEncomendas/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { MdCheck, MdKeyboardArrowLeft } from 'react-icons/md';\nimport { Form, Input } from '@rocketseat/unform';\nimport Select from 'react-select';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { Container, EditOrder, FormOrder } from './styles';\nimport HeaderPages from '../../components/HeaderPages';\nimport history from '../../services/history';\nimport IconButton from '../../components/IconButton';\nimport ButtonBack from '../../components/ButtonBack';\nimport api from '../../services/api';\nimport * as OrdersActions from '../../store/modules/orders/actions';\nconst schema = Yup.object().shape({\n  product: Yup.string().required('O nome do produto é obrigatório'),\n  recipient_id: Yup.string().required('O destinatário é obrigatório'),\n  delivaryman_id: Yup.string().required('O entregador é obrigatório')\n});\nexport default function EdicaoEncomendas({\n  match\n}) {\n  const dispatch = useDispatch();\n  const {\n    id\n  } = match.params;\n  const [order, setOrders] = useState('');\n  const [recipient_id, setRecipients] = useState([]);\n  const [delivaryman_id, setDeliveries] = useState([]);\n  const [product, setProducts] = useState([]);\n  useEffect(() => {\n    async function loadOrder() {\n      if (id) {\n        const response = await api.get(`orders/${id}`);\n        const currentRecipient = {\n          value: response.data.recipient.id,\n          label: response.data.recipient.name\n        };\n        const currentDelivery = {\n          value: response.data.delivery.id,\n          label: response.data.delivery.name\n        };\n        response.data.currentRecipient = currentRecipient;\n        response.data.currentDelivery = currentDelivery;\n        setOrders(response.data);\n      }\n    }\n\n    async function loadRecipients() {\n      const response = await api.get('/recipient');\n      const data = response.data.map(recipient_id => ({\n        value: recipient_id.id,\n        label: recipient_id.name\n      }));\n      setRecipients(data);\n    }\n\n    async function loadDeliveries() {\n      const response = await api.get('/deliveries');\n      const dataDelivery = response.data.map(delivaryman_id => ({\n        value: delivaryman_id.id,\n        label: delivaryman_id.name\n      }));\n      setDeliveries(dataDelivery);\n    }\n\n    loadOrder();\n    loadRecipients();\n    loadDeliveries();\n  }, [id]);\n\n  async function handleSubmit(data) {\n    data.id = id;\n    dispatch(OrdersActions.updateRequest(data));\n  }\n\n  const handleRecipientChange = e => {\n    console.tron.log(e);\n    setRecipients(e);\n  };\n\n  const handleDeliverymanChange = e => {\n    console.tron.log(e);\n    setDeliveries(e);\n  };\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(EditOrder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Form, {\n    initialData: order,\n    schema: schema,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(HeaderPages, {\n    title: \"Edi\\xE7\\xE3o de Encomendas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(ButtonBack, {\n    Icon: MdKeyboardArrowLeft,\n    title: \"VOLTAR\",\n    type: \"button\",\n    action: history.goBack,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), React.createElement(IconButton, {\n    Icon: MdCheck,\n    title: \"SALVAR\",\n    type: \"submit\",\n    action: () => handleSubmit(order),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })), React.createElement(FormOrder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"divSelect\",\n    id: \"recipient_id\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Destinat\\xE1rio\"), React.createElement(Select, {\n    className: \"rec\",\n    name: \"recipient_id\",\n    placeholder: order ? order.recipient.name : 'Selecione um entregador... ',\n    options: recipient_id,\n    onChange: handleRecipientChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"divSelect\",\n    id: \"delivaryman_id\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Entregadores\"), React.createElement(Select, {\n    className: \"del\",\n    name: \"delivaryman_id\",\n    placeholder: order ? order.delivery.name : 'Selecione um entregador... ',\n    options: delivaryman_id,\n    value: delivaryman_id,\n    onChange: handleDeliverymanChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"divInp\",\n    id: \"product\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Nome do produto\"), React.createElement(Input, {\n    name: \"product\",\n    placeholder: \"Nome do produto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }))))));\n}\nEdicaoEncomendas.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    }).isRequired\n  }).isRequired\n};","map":{"version":3,"sources":["/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/Bootcamp-GoStack-DesafioFinal/fastfeetweb/src/pages/EdicaoEncomendas/index.js"],"names":["React","useEffect","useState","PropTypes","MdCheck","MdKeyboardArrowLeft","Form","Input","Select","Yup","useDispatch","toast","Container","EditOrder","FormOrder","HeaderPages","history","IconButton","ButtonBack","api","OrdersActions","schema","object","shape","product","string","required","recipient_id","delivaryman_id","EdicaoEncomendas","match","dispatch","id","params","order","setOrders","setRecipients","setDeliveries","setProducts","loadOrder","response","get","currentRecipient","value","data","recipient","label","name","currentDelivery","delivery","loadRecipients","map","loadDeliveries","dataDelivery","handleSubmit","updateRequest","handleRecipientChange","e","console","tron","log","handleDeliverymanChange","goBack","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { MdCheck, MdKeyboardArrowLeft } from 'react-icons/md';\nimport { Form, Input } from '@rocketseat/unform';\nimport Select from 'react-select';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\n\nimport { Container, EditOrder, FormOrder } from './styles';\nimport HeaderPages from '../../components/HeaderPages';\nimport history from '../../services/history';\nimport IconButton from '../../components/IconButton';\nimport ButtonBack from '../../components/ButtonBack';\nimport api from '../../services/api';\nimport * as OrdersActions from '../../store/modules/orders/actions';\n\nconst schema = Yup.object().shape({\n  product: Yup.string().required('O nome do produto é obrigatório'),\n  recipient_id: Yup.string().required('O destinatário é obrigatório'),\n  delivaryman_id: Yup.string().required('O entregador é obrigatório'),\n});\n\nexport default function EdicaoEncomendas({ match }) {\n  const dispatch = useDispatch();\n\n  const { id } = match.params;\n  const [order, setOrders] = useState('');\n  const [recipient_id, setRecipients] = useState([]);\n  const [delivaryman_id, setDeliveries] = useState([]);\n  const [product, setProducts] = useState([]);\n\n  useEffect(() => {\n    async function loadOrder() {\n      if (id) {\n        const response = await api.get(`orders/${id}`);\n\n        const currentRecipient = {\n          value: response.data.recipient.id,\n          label: response.data.recipient.name,\n        };\n\n        const currentDelivery = {\n          value: response.data.delivery.id,\n          label: response.data.delivery.name,\n        };\n\n        response.data.currentRecipient = currentRecipient;\n        response.data.currentDelivery = currentDelivery;\n\n        setOrders(response.data);\n      }\n    }\n\n    async function loadRecipients() {\n      const response = await api.get('/recipient');\n\n      const data = response.data.map(recipient_id => ({\n        value: recipient_id.id,\n        label: recipient_id.name,\n      }));\n\n      setRecipients(data);\n    }\n\n    async function loadDeliveries() {\n      const response = await api.get('/deliveries');\n\n      const dataDelivery = response.data.map(delivaryman_id => ({\n        value: delivaryman_id.id,\n        label: delivaryman_id.name,\n      }));\n\n      setDeliveries(dataDelivery);\n    }\n\n    loadOrder();\n    loadRecipients();\n    loadDeliveries();\n  }, [id]);\n\n  async function handleSubmit(data) {\n    data.id = id;\n    dispatch(OrdersActions.updateRequest(data));\n  }\n\n  const handleRecipientChange = e => {\n    console.tron.log(e);\n\n    setRecipients(e);\n  };\n\n  const handleDeliverymanChange = e => {\n    console.tron.log(e);\n\n    setDeliveries(e);\n  };\n\n  return (\n    <Container>\n      <EditOrder>\n        <Form initialData={order} schema={schema} onSubmit={handleSubmit}>\n          <HeaderPages title=\"Edição de Encomendas\">\n            <ButtonBack\n              Icon={MdKeyboardArrowLeft}\n              title=\"VOLTAR\"\n              type=\"button\"\n              action={history.goBack}\n            />\n            <IconButton\n              Icon={MdCheck}\n              title=\"SALVAR\"\n              type=\"submit\"\n              action={() => handleSubmit(order)}\n            />\n          </HeaderPages>\n          <FormOrder>\n            <div className=\"divSelect\" id=\"recipient_id\">\n              <label>Destinatário</label>\n              <Select\n                className=\"rec\"\n                name=\"recipient_id\"\n                placeholder={\n                  order ? order.recipient.name : 'Selecione um entregador... '\n                }\n                options={recipient_id}\n                onChange={handleRecipientChange}\n              />\n            </div>\n            <div className=\"divSelect\" id=\"delivaryman_id\">\n              <label>Entregadores</label>\n              <Select\n                className=\"del\"\n                name=\"delivaryman_id\"\n                placeholder={\n                  order ? order.delivery.name : 'Selecione um entregador... '\n                }\n                options={delivaryman_id}\n                value={delivaryman_id}\n                onChange={handleDeliverymanChange}\n              />\n            </div>\n            <div className=\"divInp\" id=\"product\">\n              <label>Nome do produto</label>\n              <Input name=\"product\" placeholder=\"Nome do produto\" />\n            </div>\n          </FormOrder>\n        </Form>\n      </EditOrder>\n    </Container>\n  );\n}\n\nEdicaoEncomendas.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}