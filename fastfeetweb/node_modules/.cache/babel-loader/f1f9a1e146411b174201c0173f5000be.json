{"ast":null,"code":"var _jsxFileName = \"/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/Bootcamp-GoStack-DesafioFinal/fastfeetweb/src/pages/EdicaoEncomendas/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { MdCheck, MdKeyboardArrowLeft } from 'react-icons/md';\nimport { Form, Input } from '@rocketseat/unform';\nimport Select from 'react-select';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { MDBSelect, MDBSelectInput, MDBSelectOptions, MDBSelectOption } from 'mdbreact';\nimport { Container, EditOrder, FormOrder } from './styles';\nimport HeaderPages from '../../components/HeaderPages';\nimport history from '../../services/history';\nimport IconButton from '../../components/IconButton';\nimport ButtonBack from '../../components/ButtonBack';\nimport api from '../../services/api';\nimport * as OrdersActions from '../../store/modules/orders/actions';\nconst schema = Yup.object().shape({\n  product: Yup.string().required('O nome do produto é obrigatório'),\n  recipient_id: Yup.string().required('O destinatário é obrigatório'),\n  delivaryman_id: Yup.string().required('O entregador é obrigatório')\n});\nexport default function EdicaoEncomendas({\n  match\n}) {\n  const dispatch = useDispatch();\n  const {\n    id\n  } = match.params;\n  const [order, setOrders] = useState('');\n  const [recipients, setRecipients] = useState([]);\n  const [deliveries, setDeliveries] = useState([]);\n  const [products, setProducts] = useState([]);\n  useEffect(() => {\n    async function loadOrder() {\n      if (id) {\n        const response = await api.get(`orders/${id}`);\n        const recipient_id = {\n          value: response.data.recipient.id,\n          label: response.data.recipient.name\n        };\n        const delivaryman_id = {\n          value: response.data.delivery.id,\n          label: response.data.delivery.name\n        };\n        response.data.recipient_id = recipient_id;\n        response.data.delivaryman_id = delivaryman_id;\n        setOrders(response.data);\n      }\n    }\n\n    async function loadRecipients() {\n      const response = await api.get('/recipient');\n      const data = response.data.map(recipients => ({\n        value: recipients.id,\n        label: recipients.name\n      }));\n      setRecipients(data);\n    }\n\n    async function loadDeliveries() {\n      const response = await api.get('/deliveries');\n      const dataDelivery = response.data.map(deliveries => ({\n        value: deliveries.id,\n        label: deliveries.name\n      }));\n      setDeliveries(dataDelivery);\n    }\n\n    loadOrder();\n    loadRecipients();\n    loadDeliveries();\n  }, [id]);\n\n  async function handleSubmit(data) {\n    if (!id) {//dispatch(OrdersActions.addRequest(data));\n    } else {\n      data.id = id;\n      dispatch(OrdersActions.updateRequest(data));\n    }\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(EditOrder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(HeaderPages, {\n    title: \"Edi\\xE7\\xE3o de Encomendas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(ButtonBack, {\n    Icon: MdKeyboardArrowLeft,\n    title: \"VOLTAR\",\n    type: \"button\",\n    action: history.goBack,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(IconButton, {\n    Icon: MdCheck,\n    title: \"SALVAR\",\n    type: \"submit\",\n    action: () => handleSubmit(order),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })), React.createElement(FormOrder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Form, {\n    initialData: order,\n    schema: schema,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"divSelect\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Destinat\\xE1rio\"), React.createElement(Select, {\n    className: \"rec\",\n    name: \"recipient_id\",\n    placeholder: order ? order.recipient.name : 'Selecione um destinatário... ',\n    defaultValue: order.recipient_id,\n    options: recipients,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"divSelect\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Entregadores\"), React.createElement(Select, {\n    className: \"del\",\n    name: \"delivaryman_id\",\n    placeholder: order ? order.delivery.name : 'Selecione um entregador... ',\n    defaultValue: order.delivaryman_id,\n    onChange: e => setDeliveries({\n      delivaryman_id: e.value\n    }, console.tron.log('HELLO', e.value)),\n    options: deliveries,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"divInp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"/* \", React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Nome do produto\"), React.createElement(Input, {\n    name: \"product\",\n    placeholder: \"Nome do produto\",\n    onChange: e => setProducts({\n      product: e.value\n    }, console.tron.log('HELLO', e.value)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), ' ', \"*/\", React.createElement(MDBSelect, {\n    label: \"Example label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(MDBSelectInput, {\n    selected: \"Choose your country\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }), React.createElement(MDBSelectOptions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(MDBSelectOption, {\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"Choose your country\"), React.createElement(MDBSelectOption, {\n    value: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"USA\"), React.createElement(MDBSelectOption, {\n    value: \"2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \"Germany\"), React.createElement(MDBSelectOption, {\n    value: \"3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, \"France\"), React.createElement(MDBSelectOption, {\n    value: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, \"Poland\"), React.createElement(MDBSelectOption, {\n    value: \"5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"Japan\"))))))));\n}\nEdicaoEncomendas.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    }).isRequired\n  }).isRequired\n};","map":{"version":3,"sources":["/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/Bootcamp-GoStack-DesafioFinal/fastfeetweb/src/pages/EdicaoEncomendas/index.js"],"names":["React","useEffect","useState","PropTypes","MdCheck","MdKeyboardArrowLeft","Form","Input","Select","Yup","useDispatch","MDBSelect","MDBSelectInput","MDBSelectOptions","MDBSelectOption","Container","EditOrder","FormOrder","HeaderPages","history","IconButton","ButtonBack","api","OrdersActions","schema","object","shape","product","string","required","recipient_id","delivaryman_id","EdicaoEncomendas","match","dispatch","id","params","order","setOrders","recipients","setRecipients","deliveries","setDeliveries","products","setProducts","loadOrder","response","get","value","data","recipient","label","name","delivery","loadRecipients","map","loadDeliveries","dataDelivery","handleSubmit","updateRequest","goBack","e","console","tron","log","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { MdCheck, MdKeyboardArrowLeft } from 'react-icons/md';\nimport { Form, Input } from '@rocketseat/unform';\nimport Select from 'react-select';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport {\n  MDBSelect,\n  MDBSelectInput,\n  MDBSelectOptions,\n  MDBSelectOption,\n} from 'mdbreact';\n\nimport { Container, EditOrder, FormOrder } from './styles';\nimport HeaderPages from '../../components/HeaderPages';\nimport history from '../../services/history';\nimport IconButton from '../../components/IconButton';\nimport ButtonBack from '../../components/ButtonBack';\nimport api from '../../services/api';\nimport * as OrdersActions from '../../store/modules/orders/actions';\n\nconst schema = Yup.object().shape({\n  product: Yup.string().required('O nome do produto é obrigatório'),\n  recipient_id: Yup.string().required('O destinatário é obrigatório'),\n  delivaryman_id: Yup.string().required('O entregador é obrigatório'),\n});\n\nexport default function EdicaoEncomendas({ match }) {\n  const dispatch = useDispatch();\n\n  const { id } = match.params;\n  const [order, setOrders] = useState('');\n  const [recipients, setRecipients] = useState([]);\n  const [deliveries, setDeliveries] = useState([]);\n  const [products, setProducts] = useState([]);\n\n  useEffect(() => {\n    async function loadOrder() {\n      if (id) {\n        const response = await api.get(`orders/${id}`);\n\n        const recipient_id = {\n          value: response.data.recipient.id,\n          label: response.data.recipient.name,\n        };\n\n        const delivaryman_id = {\n          value: response.data.delivery.id,\n          label: response.data.delivery.name,\n        };\n\n        response.data.recipient_id = recipient_id;\n        response.data.delivaryman_id = delivaryman_id;\n\n        setOrders(response.data);\n      }\n    }\n\n    async function loadRecipients() {\n      const response = await api.get('/recipient');\n\n      const data = response.data.map(recipients => ({\n        value: recipients.id,\n        label: recipients.name,\n      }));\n\n      setRecipients(data);\n    }\n\n    async function loadDeliveries() {\n      const response = await api.get('/deliveries');\n\n      const dataDelivery = response.data.map(deliveries => ({\n        value: deliveries.id,\n        label: deliveries.name,\n      }));\n\n      setDeliveries(dataDelivery);\n    }\n\n    loadOrder();\n    loadRecipients();\n    loadDeliveries();\n  }, [id]);\n\n  async function handleSubmit(data) {\n    if (!id) {\n      //dispatch(OrdersActions.addRequest(data));\n    } else {\n      data.id = id;\n      dispatch(OrdersActions.updateRequest(data));\n    }\n  }\n\n  return (\n    <Container>\n      <EditOrder>\n        <HeaderPages title=\"Edição de Encomendas\">\n          <ButtonBack\n            Icon={MdKeyboardArrowLeft}\n            title=\"VOLTAR\"\n            type=\"button\"\n            action={history.goBack}\n          />\n          <IconButton\n            Icon={MdCheck}\n            title=\"SALVAR\"\n            type=\"submit\"\n            action={() => handleSubmit(order)}\n          />\n        </HeaderPages>\n        <FormOrder>\n          <Form initialData={order} schema={schema} onSubmit={handleSubmit}>\n            <div className=\"divSelect\">\n              <label>Destinatário</label>\n              <Select\n                className=\"rec\"\n                name=\"recipient_id\"\n                placeholder={\n                  order ? order.recipient.name : 'Selecione um destinatário... '\n                }\n                defaultValue={order.recipient_id}\n                options={recipients}\n              />\n            </div>\n            <div className=\"divSelect\">\n              <label>Entregadores</label>\n              <Select\n                className=\"del\"\n                name=\"delivaryman_id\"\n                placeholder={\n                  order ? order.delivery.name : 'Selecione um entregador... '\n                }\n                defaultValue={order.delivaryman_id}\n                onChange={e =>\n                  setDeliveries(\n                    { delivaryman_id: e.value },\n                    console.tron.log('HELLO', e.value)\n                  )\n                }\n                options={deliveries}\n              />\n            </div>\n            <div className=\"divInp\">\n              /* <label>Nome do produto</label>\n              <Input\n                name=\"product\"\n                placeholder=\"Nome do produto\"\n                onChange={e =>\n                  setProducts(\n                    { product: e.value },\n                    console.tron.log('HELLO', e.value)\n                  )\n                }\n              />{' '}\n              */\n              <MDBSelect label=\"Example label\">\n                <MDBSelectInput selected=\"Choose your country\" />\n                <MDBSelectOptions>\n                  <MDBSelectOption disabled>\n                    Choose your country\n                  </MDBSelectOption>\n                  <MDBSelectOption value=\"1\">USA</MDBSelectOption>\n                  <MDBSelectOption value=\"2\">Germany</MDBSelectOption>\n                  <MDBSelectOption value=\"3\">France</MDBSelectOption>\n                  <MDBSelectOption value=\"4\">Poland</MDBSelectOption>\n                  <MDBSelectOption value=\"5\">Japan</MDBSelectOption>\n                </MDBSelectOptions>\n              </MDBSelect>\n            </div>\n          </Form>\n        </FormOrder>\n      </EditOrder>\n    </Container>\n  );\n}\n\nEdicaoEncomendas.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}