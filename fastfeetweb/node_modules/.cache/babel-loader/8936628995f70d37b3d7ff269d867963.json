{"ast":null,"code":"var _jsxFileName = \"/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/Bootcamp-GoStack-DesafioFinal/fastfeetweb/src/pages/EdicaoEncomendas/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { MdCheck, MdKeyboardArrowLeft } from 'react-icons/md';\nimport { Form, Input } from '@rocketseat/unform';\nimport Select from 'react-select';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { Container, EditOrder, FormOrder } from './styles';\nimport HeaderPages from '../../components/HeaderPages';\nimport history from '../../services/history';\nimport IconButton from '../../components/IconButton';\nimport ButtonBack from '../../components/ButtonBack';\nimport api from '../../services/api';\nimport { updateRequest } from '../../store/modules/orders/actions';\nconst schema = Yup.object().shape({\n  product: Yup.string().required('O nome do produto é obrigatório'),\n  recipient_id: Yup.string().required('O destinatário é obrigatório'),\n  deliveryman_id: Yup.string().required('O entregador é obrigatório')\n});\nexport default function EdicaoEncomendas({\n  match\n}) {\n  const {\n    id\n  } = match.params;\n  const [order, setOrders] = useState('');\n  const [recipients, setRecipients] = useState([]);\n  const [deliveries, setDeliveries] = useState([]);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    async function loadOrder() {\n      if (id) {\n        const response = await api.get(`orders/${id}`);\n        const currentRecipient = {\n          value: response.data.recipient.id,\n          label: response.data.recipient.name\n        };\n        const currentDeliveryman = {\n          value: response.data.delivery.id,\n          label: response.data.delivery.name\n        };\n        response.data.currentRecipient = currentRecipient;\n        response.data.currentDeliveryman = currentDeliveryman;\n        setOrders(response.data);\n      }\n    }\n\n    async function loadRecipients() {\n      const response = await api.get('/recipient');\n      const data = response.data.map(recipients => ({\n        value: recipients.id,\n        label: recipients.name\n      }));\n      setRecipients(data);\n    }\n\n    async function loadDeliveries() {\n      const response = await api.get('/deliveries');\n      const dataDelivery = response.data.map(deliveries => ({\n        value: deliveries.id,\n        label: deliveries.name\n      }));\n      setDeliveries(dataDelivery);\n    }\n\n    loadOrder();\n    loadRecipients();\n    loadDeliveries();\n  }, [id]);\n\n  function handleSubmit({\n    data\n  }) {\n    if (id) {\n      data.id = data;\n    }\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(EditOrder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(HeaderPages, {\n    title: \"Edi\\xE7\\xE3o de Encomendas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(ButtonBack, {\n    Icon: MdKeyboardArrowLeft,\n    title: \"VOLTAR\",\n    type: \"button\",\n    action: history.goBack,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(IconButton, {\n    Icon: MdCheck,\n    title: \"SALVAR\",\n    type: \"button\",\n    action: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  })), React.createElement(FormOrder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Form, {\n    initialData: order,\n    schema: schema,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"divSelect\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Destinat\\xE1rio\"), React.createElement(Select, {\n    className: \"rec\",\n    name: \"recipient_id\",\n    placeholder: order ? order.recipient.name : 'Selecione um destinatário... ',\n    defaultValue: order.recipient_id,\n    options: recipients,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"divSelect\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Entregadores\"), React.createElement(Select, {\n    className: \"del\",\n    name: \"deliveryman_id\",\n    placeholder: order ? order.delivery.name : 'Selecione um entregador... ',\n    defaultValue: order.deliveryman_id,\n    options: deliveries,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"divInp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Nome do produto\"), React.createElement(Input, {\n    name: \"product\",\n    type: \"text\",\n    placeholder: order.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }))))));\n}\nEdicaoEncomendas.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    }).isRequired\n  }).isRequired\n};","map":{"version":3,"sources":["/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/Bootcamp-GoStack-DesafioFinal/fastfeetweb/src/pages/EdicaoEncomendas/index.js"],"names":["React","useEffect","useState","PropTypes","MdCheck","MdKeyboardArrowLeft","Form","Input","Select","Yup","useDispatch","Container","EditOrder","FormOrder","HeaderPages","history","IconButton","ButtonBack","api","updateRequest","schema","object","shape","product","string","required","recipient_id","deliveryman_id","EdicaoEncomendas","match","id","params","order","setOrders","recipients","setRecipients","deliveries","setDeliveries","dispatch","loadOrder","response","get","currentRecipient","value","data","recipient","label","name","currentDeliveryman","delivery","loadRecipients","map","loadDeliveries","dataDelivery","handleSubmit","goBack","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { MdCheck, MdKeyboardArrowLeft } from 'react-icons/md';\nimport { Form, Input } from '@rocketseat/unform';\nimport Select from 'react-select';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\n\nimport { Container, EditOrder, FormOrder } from './styles';\nimport HeaderPages from '../../components/HeaderPages';\nimport history from '../../services/history';\nimport IconButton from '../../components/IconButton';\nimport ButtonBack from '../../components/ButtonBack';\nimport api from '../../services/api';\nimport { updateRequest } from '../../store/modules/orders/actions';\n\nconst schema = Yup.object().shape({\n  product: Yup.string().required('O nome do produto é obrigatório'),\n  recipient_id: Yup.string().required('O destinatário é obrigatório'),\n  deliveryman_id: Yup.string().required('O entregador é obrigatório'),\n});\n\nexport default function EdicaoEncomendas({ match }) {\n  const { id } = match.params;\n  const [order, setOrders] = useState('');\n  const [recipients, setRecipients] = useState([]);\n  const [deliveries, setDeliveries] = useState([]);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function loadOrder() {\n      if (id) {\n        const response = await api.get(`orders/${id}`);\n\n        const currentRecipient = {\n          value: response.data.recipient.id,\n          label: response.data.recipient.name,\n        };\n\n        const currentDeliveryman = {\n          value: response.data.delivery.id,\n          label: response.data.delivery.name,\n        };\n\n        response.data.currentRecipient = currentRecipient;\n        response.data.currentDeliveryman = currentDeliveryman;\n\n        setOrders(response.data);\n      }\n    }\n\n    async function loadRecipients() {\n      const response = await api.get('/recipient');\n\n      const data = response.data.map(recipients => ({\n        value: recipients.id,\n        label: recipients.name,\n      }));\n\n      setRecipients(data);\n    }\n\n    async function loadDeliveries() {\n      const response = await api.get('/deliveries');\n\n      const dataDelivery = response.data.map(deliveries => ({\n        value: deliveries.id,\n        label: deliveries.name,\n      }));\n\n      setDeliveries(dataDelivery);\n    }\n\n    loadOrder();\n    loadRecipients();\n    loadDeliveries();\n  }, [id]);\n\n  function handleSubmit({ data }) {\n    if (id) {\n      data.id = data;\n    }\n  }\n\n  return (\n    <Container>\n      <EditOrder>\n        <HeaderPages title=\"Edição de Encomendas\">\n          <ButtonBack\n            Icon={MdKeyboardArrowLeft}\n            title=\"VOLTAR\"\n            type=\"button\"\n            action={history.goBack}\n          />\n          <IconButton\n            Icon={MdCheck}\n            title=\"SALVAR\"\n            type=\"button\"\n            action={handleSubmit}\n          />\n        </HeaderPages>\n        <FormOrder>\n          <Form initialData={order} schema={schema} onSubmit={handleSubmit}>\n            <div className=\"divSelect\">\n              <label>Destinatário</label>\n              <Select\n                className=\"rec\"\n                name=\"recipient_id\"\n                placeholder={\n                  order ? order.recipient.name : 'Selecione um destinatário... '\n                }\n                defaultValue={order.recipient_id}\n                options={recipients}\n              />\n            </div>\n            <div className=\"divSelect\">\n              <label>Entregadores</label>\n              <Select\n                className=\"del\"\n                name=\"deliveryman_id\"\n                placeholder={\n                  order ? order.delivery.name : 'Selecione um entregador... '\n                }\n                defaultValue={order.deliveryman_id}\n                options={deliveries}\n              />\n            </div>\n            <div className=\"divInp\">\n              <label>Nome do produto</label>\n              <Input name=\"product\" type=\"text\" placeholder={order.name} />\n            </div>\n          </Form>\n        </FormOrder>\n      </EditOrder>\n    </Container>\n  );\n}\n\nEdicaoEncomendas.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}