{"ast":null,"code":"var _jsxFileName = \"/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/Bootcamp-GoStack-DesafioFinal/fastfeetweb/src/components/AsyncSelect/index.js\";\nimport React, { useRef, useEffect } from 'react';\nimport Select from 'react-select/async';\nimport { useField } from '@unform/core';\nimport PropTypes from 'prop-types';\nimport { Container, Label, Error } from './styles';\nexport default function AsyncSelectInput({\n  name,\n  label,\n  ...rest\n}) {\n  const selectRef = useRef(null);\n  const {\n    fieldName,\n    defaultValue,\n    registerField,\n    error\n  } = useField(name);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'select.state.value',\n      getValue: ref => {\n        if (rest.isMulti) {\n          if (!ref.select.state.value) {\n            return [];\n          }\n\n          return ref.select.state.value.map(option => option.value);\n        }\n\n        if (!ref.select.state.value) {\n          return '';\n        }\n\n        return ref.select.state.value.value;\n      },\n\n      clearValue(ref) {\n        ref.select.select.clearValue();\n      },\n\n      setValue(ref, value) {\n        ref.select.select.setValue(value);\n      }\n\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, label && React.createElement(Label, {\n    htmlFor: fieldName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, label), React.createElement(Select, Object.assign({\n    cacheOptions: true,\n    defaultValue: defaultValue,\n    ref: selectRef,\n    classNamePrefix: \"react-select\"\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  })), error && React.createElement(Error, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, error));\n}\nAsyncSelectInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string\n};\nAsyncSelectInput.defaultProps = {\n  label: ''\n};","map":{"version":3,"sources":["/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/Bootcamp-GoStack-DesafioFinal/fastfeetweb/src/components/AsyncSelect/index.js"],"names":["React","useRef","useEffect","Select","useField","PropTypes","Container","Label","Error","AsyncSelectInput","name","label","rest","selectRef","fieldName","defaultValue","registerField","error","ref","current","path","getValue","isMulti","select","state","value","map","option","clearValue","setValue","propTypes","string","isRequired","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,KAA3B,QAAwC,UAAxC;AAEA,eAAe,SAASC,gBAAT,CAA0B;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAe,KAAGC;AAAlB,CAA1B,EAAoD;AACjE,QAAMC,SAAS,GAAGZ,MAAM,CAAC,IAAD,CAAxB;AACA,QAAM;AAAEa,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,aAA3B;AAA0CC,IAAAA;AAA1C,MAAoDb,QAAQ,CAACM,IAAD,CAAlE;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,aAAa,CAAC;AACZN,MAAAA,IAAI,EAAEI,SADM;AAEZI,MAAAA,GAAG,EAAEL,SAAS,CAACM,OAFH;AAGZC,MAAAA,IAAI,EAAE,oBAHM;AAIZC,MAAAA,QAAQ,EAAEH,GAAG,IAAI;AACf,YAAIN,IAAI,CAACU,OAAT,EAAkB;AAChB,cAAI,CAACJ,GAAG,CAACK,MAAJ,CAAWC,KAAX,CAAiBC,KAAtB,EAA6B;AAC3B,mBAAO,EAAP;AACD;;AACD,iBAAOP,GAAG,CAACK,MAAJ,CAAWC,KAAX,CAAiBC,KAAjB,CAAuBC,GAAvB,CAA2BC,MAAM,IAAIA,MAAM,CAACF,KAA5C,CAAP;AACD;;AACD,YAAI,CAACP,GAAG,CAACK,MAAJ,CAAWC,KAAX,CAAiBC,KAAtB,EAA6B;AAC3B,iBAAO,EAAP;AACD;;AACD,eAAOP,GAAG,CAACK,MAAJ,CAAWC,KAAX,CAAiBC,KAAjB,CAAuBA,KAA9B;AACD,OAfW;;AAgBZG,MAAAA,UAAU,CAACV,GAAD,EAAM;AACdA,QAAAA,GAAG,CAACK,MAAJ,CAAWA,MAAX,CAAkBK,UAAlB;AACD,OAlBW;;AAmBZC,MAAAA,QAAQ,CAACX,GAAD,EAAMO,KAAN,EAAa;AACnBP,QAAAA,GAAG,CAACK,MAAJ,CAAWA,MAAX,CAAkBM,QAAlB,CAA2BJ,KAA3B;AACD;;AArBW,KAAD,CAAb;AAuBD,GAxBQ,EAwBN,CAACX,SAAD,EAAYE,aAAZ,EAA2BJ,IAAI,CAACU,OAAhC,CAxBM,CAAT;AA0BA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,KAAK,IAAI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAEG,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BH,KAA5B,CADZ,EAEE,oBAAC,MAAD;AACE,IAAA,YAAY,MADd;AAEE,IAAA,YAAY,EAAEI,YAFhB;AAGE,IAAA,GAAG,EAAEF,SAHP;AAIE,IAAA,eAAe,EAAC;AAJlB,KAKMD,IALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EASGK,KAAK,IAAI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQA,KAAR,CATZ,CADF;AAaD;AAEDR,gBAAgB,CAACqB,SAAjB,GAA6B;AAC3BpB,EAAAA,IAAI,EAAEL,SAAS,CAAC0B,MAAV,CAAiBC,UADI;AAE3BrB,EAAAA,KAAK,EAAEN,SAAS,CAAC0B;AAFU,CAA7B;AAKAtB,gBAAgB,CAACwB,YAAjB,GAAgC;AAC9BtB,EAAAA,KAAK,EAAE;AADuB,CAAhC","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport Select from 'react-select/async';\n\nimport { useField } from '@unform/core';\nimport PropTypes from 'prop-types';\n\nimport { Container, Label, Error } from './styles';\n\nexport default function AsyncSelectInput({ name, label, ...rest }) {\n  const selectRef = useRef(null);\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'select.state.value',\n      getValue: ref => {\n        if (rest.isMulti) {\n          if (!ref.select.state.value) {\n            return [];\n          }\n          return ref.select.state.value.map(option => option.value);\n        }\n        if (!ref.select.state.value) {\n          return '';\n        }\n        return ref.select.state.value.value;\n      },\n      clearValue(ref) {\n        ref.select.select.clearValue();\n      },\n      setValue(ref, value) {\n        ref.select.select.setValue(value);\n      },\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n\n  return (\n    <Container>\n      {label && <Label htmlFor={fieldName}>{label}</Label>}\n      <Select\n        cacheOptions\n        defaultValue={defaultValue}\n        ref={selectRef}\n        classNamePrefix=\"react-select\"\n        {...rest}\n      />\n      {error && <Error>{error}</Error>}\n    </Container>\n  );\n}\n\nAsyncSelectInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string,\n};\n\nAsyncSelectInput.defaultProps = {\n  label: '',\n};\n"]},"metadata":{},"sourceType":"module"}