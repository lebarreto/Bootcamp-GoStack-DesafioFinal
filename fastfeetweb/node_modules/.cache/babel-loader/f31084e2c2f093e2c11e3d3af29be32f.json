{"ast":null,"code":"import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { updateSuccess } from './actions';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\nexport function* update({\n  payload\n}) {\n  try {\n    const {\n      id,\n      product\n    } = payload;\n    yield call(api.put, `orders/${id}`, {\n      product\n    });\n    console.tron.log(order.product);\n    yield put(updateSuccess(order));\n    toast.success('Encomenda atualizada com sucesso!');\n    history.push('/encomendas');\n  } catch (error) {\n    toast.error('Falha na atualização da encomenda, verifique os campos novamente.');\n  }\n}\nexport default all([takeLatest('@order/UPDATE_REQUEST', update)]);","map":{"version":3,"sources":["/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/Bootcamp-GoStack-DesafioFinal/fastfeetweb/src/store/modules/orders/sagas.js"],"names":["all","takeLatest","call","put","toast","updateSuccess","api","history","update","payload","id","product","console","tron","log","order","success","push","error"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,SAASC,aAAT,QAA8B,WAA9B;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AACnC,MAAI;AACF,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAkBF,OAAxB;AAEA,UAAMP,IAAI,CAACI,GAAG,CAACH,GAAL,EAAW,UAASO,EAAG,EAAvB,EAA0B;AAAEC,MAAAA;AAAF,KAA1B,CAAV;AAEAC,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiBC,KAAK,CAACJ,OAAvB;AACA,UAAMR,GAAG,CAACE,aAAa,CAACU,KAAD,CAAd,CAAT;AACAX,IAAAA,KAAK,CAACY,OAAN,CAAc,mCAAd;AAEAT,IAAAA,OAAO,CAACU,IAAR,CAAa,aAAb;AACD,GAVD,CAUE,OAAOC,KAAP,EAAc;AACdd,IAAAA,KAAK,CAACc,KAAN,CACE,mEADF;AAGD;AACF;AAED,eAAelB,GAAG,CAAC,CAACC,UAAU,CAAC,uBAAD,EAA0BO,MAA1B,CAAX,CAAD,CAAlB","sourcesContent":["import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nimport { updateSuccess } from './actions';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\n\nexport function* update({ payload }) {\n  try {\n    const { id, product } = payload;\n\n    yield call(api.put, `orders/${id}`, { product });\n\n    console.tron.log(order.product);\n    yield put(updateSuccess(order));\n    toast.success('Encomenda atualizada com sucesso!');\n\n    history.push('/encomendas');\n  } catch (error) {\n    toast.error(\n      'Falha na atualização da encomenda, verifique os campos novamente.'\n    );\n  }\n}\n\nexport default all([takeLatest('@order/UPDATE_REQUEST', update)]);\n"]},"metadata":{},"sourceType":"module"}