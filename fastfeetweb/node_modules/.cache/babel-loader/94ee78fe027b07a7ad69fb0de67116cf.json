{"ast":null,"code":"import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { updateSuccess, deleteSuccess } from './actions';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\nexport function* update({\n  payload\n}) {\n  try {\n    const {\n      id,\n      product\n    } = payload.order;\n    yield call(api.put, `orders/${id}`, {\n      product\n    });\n    yield put(updateSuccess({\n      product\n    }));\n    toast.success('Encomenda atualizada com sucesso!');\n    history.push('/encomendas');\n  } catch (error) {\n    toast.error('Falha na atualização da encomenda, verifique os campos novamente.');\n  }\n}\nexport function* addOrder({\n  payload\n}) {\n  try {\n    const {\n      product,\n      recipient_id,\n      delivaryman_id\n    } = payload;\n    yield call(api.post, `orders`, {\n      product,\n      recipient_id,\n      delivaryman_id\n    });\n    toast.success('Encomenda criada com sucesso!');\n    history.push('/encomendas');\n  } catch (error) {\n    toast.error('Falha na atualização da encomenda, verifique os campos novamente.');\n  }\n}\nexport function* deleteOrder({\n  payload\n}) {\n  try {\n    const {\n      id\n    } = payload;\n    console.tron.log('id', id);\n    yield call(api.delete, `orders/${id}`, {\n      id\n    });\n    yield put(deleteSuccess({\n      id\n    }));\n    toast.success('Encomenda deletada com sucesso!');\n    history.push('/encomendas');\n  } catch (error) {\n    toast.error('Falha ao deletar encomenda.');\n  }\n}\nexport default all([takeLatest('@order/UPDATE_REQUEST', update), takeLatest('@order/ADD_REQUEST', addOrder), takeLatest('@order/DELETE_REQUEST', deleteOrder)]);","map":{"version":3,"sources":["/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/Bootcamp-GoStack-DesafioFinal/fastfeetweb/src/store/modules/orders/sagas.js"],"names":["all","takeLatest","call","put","toast","updateSuccess","deleteSuccess","api","history","update","payload","id","product","order","success","push","error","addOrder","recipient_id","delivaryman_id","post","deleteOrder","console","tron","log","delete"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,WAA7C;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AACnC,MAAI;AACF,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAkBF,OAAO,CAACG,KAAhC;AAEA,UAAMX,IAAI,CAACK,GAAG,CAACJ,GAAL,EAAW,UAASQ,EAAG,EAAvB,EAA0B;AAClCC,MAAAA;AADkC,KAA1B,CAAV;AAIA,UAAMT,GAAG,CAACE,aAAa,CAAC;AAAEO,MAAAA;AAAF,KAAD,CAAd,CAAT;AACAR,IAAAA,KAAK,CAACU,OAAN,CAAc,mCAAd;AAEAN,IAAAA,OAAO,CAACO,IAAR,CAAa,aAAb;AACD,GAXD,CAWE,OAAOC,KAAP,EAAc;AACdZ,IAAAA,KAAK,CAACY,KAAN,CACE,mEADF;AAGD;AACF;AAED,OAAO,UAAUC,QAAV,CAAmB;AAAEP,EAAAA;AAAF,CAAnB,EAAgC;AACrC,MAAI;AACF,UAAM;AAAEE,MAAAA,OAAF;AAAWM,MAAAA,YAAX;AAAyBC,MAAAA;AAAzB,QAA4CT,OAAlD;AAEA,UAAMR,IAAI,CAACK,GAAG,CAACa,IAAL,EAAY,QAAZ,EAAqB;AAC7BR,MAAAA,OAD6B;AAE7BM,MAAAA,YAF6B;AAG7BC,MAAAA;AAH6B,KAArB,CAAV;AAMAf,IAAAA,KAAK,CAACU,OAAN,CAAc,+BAAd;AAEAN,IAAAA,OAAO,CAACO,IAAR,CAAa,aAAb;AACD,GAZD,CAYE,OAAOC,KAAP,EAAc;AACdZ,IAAAA,KAAK,CAACY,KAAN,CACE,mEADF;AAGD;AACF;AAED,OAAO,UAAUK,WAAV,CAAsB;AAAEX,EAAAA;AAAF,CAAtB,EAAmC;AACxC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAASD,OAAf;AACAY,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiB,IAAjB,EAAuBb,EAAvB;AAEA,UAAMT,IAAI,CAACK,GAAG,CAACkB,MAAL,EAAc,UAASd,EAAG,EAA1B,EAA6B;AAAEA,MAAAA;AAAF,KAA7B,CAAV;AAEA,UAAMR,GAAG,CAACG,aAAa,CAAC;AAAEK,MAAAA;AAAF,KAAD,CAAd,CAAT;AACAP,IAAAA,KAAK,CAACU,OAAN,CAAc,iCAAd;AAEAN,IAAAA,OAAO,CAACO,IAAR,CAAa,aAAb;AACD,GAVD,CAUE,OAAOC,KAAP,EAAc;AACdZ,IAAAA,KAAK,CAACY,KAAN,CAAY,6BAAZ;AACD;AACF;AAED,eAAehB,GAAG,CAAC,CACjBC,UAAU,CAAC,uBAAD,EAA0BQ,MAA1B,CADO,EAEjBR,UAAU,CAAC,oBAAD,EAAuBgB,QAAvB,CAFO,EAGjBhB,UAAU,CAAC,uBAAD,EAA0BoB,WAA1B,CAHO,CAAD,CAAlB","sourcesContent":["import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nimport { updateSuccess, deleteSuccess } from './actions';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\n\nexport function* update({ payload }) {\n  try {\n    const { id, product } = payload.order;\n\n    yield call(api.put, `orders/${id}`, {\n      product,\n    });\n\n    yield put(updateSuccess({ product }));\n    toast.success('Encomenda atualizada com sucesso!');\n\n    history.push('/encomendas');\n  } catch (error) {\n    toast.error(\n      'Falha na atualização da encomenda, verifique os campos novamente.'\n    );\n  }\n}\n\nexport function* addOrder({ payload }) {\n  try {\n    const { product, recipient_id, delivaryman_id } = payload;\n\n    yield call(api.post, `orders`, {\n      product,\n      recipient_id,\n      delivaryman_id,\n    });\n\n    toast.success('Encomenda criada com sucesso!');\n\n    history.push('/encomendas');\n  } catch (error) {\n    toast.error(\n      'Falha na atualização da encomenda, verifique os campos novamente.'\n    );\n  }\n}\n\nexport function* deleteOrder({ payload }) {\n  try {\n    const { id } = payload;\n    console.tron.log('id', id);\n\n    yield call(api.delete, `orders/${id}`, { id });\n\n    yield put(deleteSuccess({ id }));\n    toast.success('Encomenda deletada com sucesso!');\n\n    history.push('/encomendas');\n  } catch (error) {\n    toast.error('Falha ao deletar encomenda.');\n  }\n}\n\nexport default all([\n  takeLatest('@order/UPDATE_REQUEST', update),\n  takeLatest('@order/ADD_REQUEST', addOrder),\n  takeLatest('@order/DELETE_REQUEST', deleteOrder),\n]);\n"]},"metadata":{},"sourceType":"module"}