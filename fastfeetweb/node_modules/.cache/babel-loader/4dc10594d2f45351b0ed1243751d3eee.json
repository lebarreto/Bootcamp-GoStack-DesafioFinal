{"ast":null,"code":"var _jsxFileName = \"/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/Bootcamp-GoStack-DesafioFinal/fastfeetweb/src/pages/EdicaoEncomendas/index.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { MdCheck, MdKeyboardArrowLeft } from 'react-icons/md';\nimport { Form, Input, Select } from '@rocketseat/unform';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { Container, EditOrder, FormOrder } from './styles';\nimport HeaderPages from '../../components/HeaderPages';\nimport history from '../../services/history';\nimport IconButton from '../../components/IconButton';\nimport ButtonBack from '../../components/ButtonBack';\nimport api from '../../services/api';\nexport default function EdicaoEncomendas({\n  match\n}) {\n  const {\n    id\n  } = match.params;\n  const [order, setOrders] = useState('');\n  const [recipients, setRecipients] = useState([]);\n  const [deliveries, setDeliveries] = useState([]);\n  const dispatch = useDispatch();\n  const schema = Yup.object().shape({\n    product: Yup.string().required('O nome do produto é obrigatório'),\n    recipient_id: Yup.string().required('O destinatário é obrigatório'),\n    deliveryman_id: Yup.string().required('O entregador é obrigatório')\n  });\n  useEffect(() => {\n    async function loadOrder() {\n      if (id) {\n        const response = await api.get(`orders/${id}`);\n        const currentRecipient = {\n          value: response.data.recipient.id,\n          label: response.data.recipient.name\n        };\n        const currentDeliveryman = {\n          value: response.data.delivery.id,\n          label: response.data.delivery.name\n        };\n        response.data.currentRecipient = currentRecipient;\n        response.data.currentDeliveryman = currentDeliveryman;\n        setOrders(response.data);\n      }\n    }\n\n    async function loadRecipients() {\n      const response = await api.get('/recipient');\n      const data = response.data.map(recipients => ({\n        value: recipients.id,\n        label: recipients.name\n      }));\n      setRecipients(data);\n    }\n\n    async function loadDeliveries() {\n      const response = await api.get('/deliveries');\n      const dataDelivery = response.data.map(deliveries => ({\n        value: deliveries.id,\n        label: deliveries.name\n      }));\n      setDeliveries(dataDelivery);\n    }\n\n    loadOrder();\n    loadRecipients();\n    loadDeliveries();\n  }, [id]);\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(EditOrder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(HeaderPages, {\n    title: \"Edi\\xE7\\xE3o de Encomendas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(ButtonBack, {\n    Icon: MdKeyboardArrowLeft,\n    title: \"VOLTAR\",\n    type: \"button\",\n    action: history.goBack,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(IconButton, {\n    Icon: MdCheck,\n    title: \"SALVAR\",\n    type: \"button\",\n    action: () => history.push('/encomendas/'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })), React.createElement(FormOrder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Form, {\n    initialData: order.id,\n    schema: schema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Entregadores\"), React.createElement(Select, {\n    name: \"deliveryman_id\",\n    placeholder: order ? order.delivery.name : 'Selecione um entregador... ',\n    defaultValue: order.deliveryman_id,\n    options: deliveries,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })))));\n}\nEdicaoEncomendas.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    }).isRequired\n  }).isRequired\n};","map":{"version":3,"sources":["/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/Bootcamp-GoStack-DesafioFinal/fastfeetweb/src/pages/EdicaoEncomendas/index.js"],"names":["React","useEffect","useRef","useState","PropTypes","MdCheck","MdKeyboardArrowLeft","Form","Input","Select","useDispatch","Yup","Container","EditOrder","FormOrder","HeaderPages","history","IconButton","ButtonBack","api","EdicaoEncomendas","match","id","params","order","setOrders","recipients","setRecipients","deliveries","setDeliveries","dispatch","schema","object","shape","product","string","required","recipient_id","deliveryman_id","loadOrder","response","get","currentRecipient","value","data","recipient","label","name","currentDeliveryman","delivery","loadRecipients","map","loadDeliveries","dataDelivery","goBack","push","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { MdCheck, MdKeyboardArrowLeft } from 'react-icons/md';\nimport { Form, Input, Select } from '@rocketseat/unform';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\n\nimport { Container, EditOrder, FormOrder } from './styles';\nimport HeaderPages from '../../components/HeaderPages';\nimport history from '../../services/history';\nimport IconButton from '../../components/IconButton';\nimport ButtonBack from '../../components/ButtonBack';\nimport api from '../../services/api';\n\nexport default function EdicaoEncomendas({ match }) {\n  const { id } = match.params;\n  const [order, setOrders] = useState('');\n  const [recipients, setRecipients] = useState([]);\n  const [deliveries, setDeliveries] = useState([]);\n\n  const dispatch = useDispatch();\n\n  const schema = Yup.object().shape({\n    product: Yup.string().required('O nome do produto é obrigatório'),\n    recipient_id: Yup.string().required('O destinatário é obrigatório'),\n    deliveryman_id: Yup.string().required('O entregador é obrigatório'),\n  });\n\n  useEffect(() => {\n    async function loadOrder() {\n      if (id) {\n        const response = await api.get(`orders/${id}`);\n\n        const currentRecipient = {\n          value: response.data.recipient.id,\n          label: response.data.recipient.name,\n        };\n\n        const currentDeliveryman = {\n          value: response.data.delivery.id,\n          label: response.data.delivery.name,\n        };\n\n        response.data.currentRecipient = currentRecipient;\n        response.data.currentDeliveryman = currentDeliveryman;\n\n        setOrders(response.data);\n      }\n    }\n\n    async function loadRecipients() {\n      const response = await api.get('/recipient');\n\n      const data = response.data.map(recipients => ({\n        value: recipients.id,\n        label: recipients.name,\n      }));\n\n      setRecipients(data);\n    }\n\n    async function loadDeliveries() {\n      const response = await api.get('/deliveries');\n\n      const dataDelivery = response.data.map(deliveries => ({\n        value: deliveries.id,\n        label: deliveries.name,\n      }));\n\n      setDeliveries(dataDelivery);\n    }\n\n    loadOrder();\n    loadRecipients();\n    loadDeliveries();\n  }, [id]);\n\n  return (\n    <Container>\n      <EditOrder>\n        <HeaderPages title=\"Edição de Encomendas\">\n          <ButtonBack\n            Icon={MdKeyboardArrowLeft}\n            title=\"VOLTAR\"\n            type=\"button\"\n            action={history.goBack}\n          />\n          <IconButton\n            Icon={MdCheck}\n            title=\"SALVAR\"\n            type=\"button\"\n            action={() => history.push('/encomendas/')}\n          />\n        </HeaderPages>\n        <FormOrder>\n          <Form initialData={order.id} schema={schema}>\n            <label>Entregadores</label>\n            <Select\n              name=\"deliveryman_id\"\n              placeholder={\n                order ? order.delivery.name : 'Selecione um entregador... '\n              }\n              defaultValue={order.deliveryman_id}\n              options={deliveries}\n            />\n          </Form>\n        </FormOrder>\n      </EditOrder>\n    </Container>\n  );\n}\n\nEdicaoEncomendas.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}