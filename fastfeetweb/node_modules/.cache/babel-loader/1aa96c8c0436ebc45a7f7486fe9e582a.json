{"ast":null,"code":"import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { updateSuccess, deleteSuccess, cancelSuccess } from './actions';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\nexport function* update({\n  id,\n  product\n}) {\n  try {\n    console.tron.log(id);\n    yield call(api.put, `orders/${id}`, {\n      id,\n      product\n    });\n    yield put(updateSuccess({\n      id,\n      product\n    }));\n    toast.success('Encomenda atualizada com sucesso!');\n    history.push('/encomendas');\n  } catch (error) {\n    toast.error('Falha na atualização da encomenda, verifique os campos novamente.');\n  }\n}\nexport function* addOrder({\n  payload\n}) {\n  try {\n    const {\n      product,\n      recipient_id,\n      delivaryman_id\n    } = payload;\n    yield call(api.post, `orders`, {\n      product,\n      recipient_id,\n      delivaryman_id\n    });\n    toast.success('Encomenda criada com sucesso!');\n    history.push('/encomendas');\n  } catch (error) {\n    toast.error('Falha na atualização da encomenda, verifique os campos novamente.');\n  }\n}\nexport function* deleteOrder({\n  payload\n}) {\n  try {\n    const {\n      id\n    } = payload;\n    console.tron.log('id', id);\n    yield call(api.delete, `orders/${id}`, {\n      id\n    });\n    yield put(deleteSuccess({\n      id\n    }));\n    toast.success('Encomenda deletada com sucesso!');\n    history.push('/encomendas');\n  } catch (error) {\n    toast.error('Falha ao deletar encomenda.');\n  }\n}\nexport function* cancelOrder({\n  payload\n}) {\n  try {\n    const {\n      id,\n      delivery_id,\n      description,\n      delivery\n    } = payload.order;\n    const canceled_at = new Date();\n    payload.order.delivery.canceled_at = canceled_at;\n    yield call(api.put, `orders/${delivery_id}`, {\n      canceled_at\n    });\n    yield put(cancelSuccess({\n      id,\n      delivery_id,\n      description,\n      delivery\n    }));\n    toast.success('Encomenda cancelada com sucesso!');\n    history.push('/problemas');\n  } catch (error) {\n    toast.error('Falha ao cancelar encomenda.');\n  }\n}\nexport default all([takeLatest('@order/UPDATE_REQUEST', update), takeLatest('@order/ADD_REQUEST', addOrder), takeLatest('@order/DELETE_REQUEST', deleteOrder), takeLatest('@order/CANCEL_REQUEST', cancelOrder)]);","map":{"version":3,"sources":["/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/Bootcamp-GoStack-DesafioFinal/fastfeetweb/src/store/modules/orders/sagas.js"],"names":["all","takeLatest","call","put","toast","updateSuccess","deleteSuccess","cancelSuccess","api","history","update","id","product","console","tron","log","success","push","error","addOrder","payload","recipient_id","delivaryman_id","post","deleteOrder","delete","cancelOrder","delivery_id","description","delivery","order","canceled_at","Date"],"mappings":"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","sourcesContent":["import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nimport { updateSuccess, deleteSuccess, cancelSuccess } from './actions';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\n\nexport function* update({ id, product }) {\n  try {\n    console.tron.log(id);\n\n    yield call(api.put, `orders/${id}`, {\n      id,\n      product,\n    });\n\n    yield put(updateSuccess({ id, product }));\n    toast.success('Encomenda atualizada com sucesso!');\n\n    history.push('/encomendas');\n  } catch (error) {\n    toast.error(\n      'Falha na atualização da encomenda, verifique os campos novamente.'\n    );\n  }\n}\n\nexport function* addOrder({ payload }) {\n  try {\n    const { product, recipient_id, delivaryman_id } = payload;\n\n    yield call(api.post, `orders`, {\n      product,\n      recipient_id,\n      delivaryman_id,\n    });\n\n    toast.success('Encomenda criada com sucesso!');\n\n    history.push('/encomendas');\n  } catch (error) {\n    toast.error(\n      'Falha na atualização da encomenda, verifique os campos novamente.'\n    );\n  }\n}\n\nexport function* deleteOrder({ payload }) {\n  try {\n    const { id } = payload;\n    console.tron.log('id', id);\n\n    yield call(api.delete, `orders/${id}`, { id });\n\n    yield put(deleteSuccess({ id }));\n    toast.success('Encomenda deletada com sucesso!');\n\n    history.push('/encomendas');\n  } catch (error) {\n    toast.error('Falha ao deletar encomenda.');\n  }\n}\n\nexport function* cancelOrder({ payload }) {\n  try {\n    const { id, delivery_id, description, delivery } = payload.order;\n\n    const canceled_at = new Date();\n    payload.order.delivery.canceled_at = canceled_at;\n\n    yield call(api.put, `orders/${delivery_id}`, { canceled_at });\n\n    yield put(cancelSuccess({ id, delivery_id, description, delivery }));\n    toast.success('Encomenda cancelada com sucesso!');\n\n    history.push('/problemas');\n  } catch (error) {\n    toast.error('Falha ao cancelar encomenda.');\n  }\n}\n\nexport default all([\n  takeLatest('@order/UPDATE_REQUEST', update),\n  takeLatest('@order/ADD_REQUEST', addOrder),\n  takeLatest('@order/DELETE_REQUEST', deleteOrder),\n  takeLatest('@order/CANCEL_REQUEST', cancelOrder),\n]);\n"]},"metadata":{},"sourceType":"module"}